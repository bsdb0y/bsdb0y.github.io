<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel on bsdb0y</title>
    <link>https://bsdb0y.github.io/tags/kernel/</link>
    <description>Recent content in kernel on bsdb0y</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://bsdb0y.github.io/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenBSD Kernel Internals — Creation of process from user-space to kernel space</title>
      <link>https://bsdb0y.github.io/posts/openbsd-kernel-internals-creation-of-process-from-user-space-to-kernel-space/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bsdb0y.github.io/posts/openbsd-kernel-internals-creation-of-process-from-user-space-to-kernel-space/</guid>
      <description>Hi there,
Have you ever thought what happens internally when we execute any command/executable from the command line? We will be diving in to the internals and the process to see exactly what happens then let’s discuss about the process creation in OpenBSD operating system from user-space level to kernel space. We will execute the ls command from the command line and then trace it through the debugger to see the magic.</description>
      <content>&lt;p&gt;Hi there,&lt;/p&gt;
&lt;h5 id=&#34;have-you-ever-thought-what-happens-internally-when-we-execute-any-commandexecutable-from-the-command-line&#34;&gt;Have you ever thought what happens internally when we execute any command/executable from the command line?&lt;/h5&gt;
&lt;p&gt;We will be diving in to the internals and the process to see exactly what happens then let’s discuss about the process creation in OpenBSD operating system from user-space level to kernel space. We will execute the &lt;code&gt;ls&lt;/code&gt; command from the command line and then trace it through the debugger to see the magic.&lt;/p&gt;
&lt;p&gt;Following are the basic lifecycle of a process,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creation&lt;/li&gt;
&lt;li&gt;execution&lt;/li&gt;
&lt;li&gt;exit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be focussing only the creation part in this post.
Used gdb debugger to debug the process and analyze the source code internals.&lt;/p&gt;
&lt;p&gt;Without wasting much time&amp;hellip;
Whenever we execute any command from the cli, for example &lt;code&gt;ls&lt;/code&gt;, the parent process is &amp;ldquo;ksh&amp;rdquo; because the default shell on OpenBSD is &lt;strong&gt;ksh&lt;/strong&gt; which invokes &lt;strong&gt;ls&lt;/strong&gt; command or any other command.&lt;/p&gt;
&lt;p&gt;So, mostly every process is created by &lt;code&gt;sys_fork()&lt;/code&gt;, system call responsible for creating new process (child process) and it internally calls &lt;a href=&#34;https://man.openbsd.org/fork1.9&#34;&gt;&lt;code&gt;fork1(9)&lt;/code&gt;&lt;/a&gt; function
&lt;a href=&#34;https://man.openbsd.org/fork1.9&#34;&gt;fork1(9)&lt;/a&gt; — OpenBSD kernel developer’s manual&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/proc.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;fork1&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p1, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func)(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arg, register_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;retval, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;rnewprocp);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://man.openbsd.org/fork1.9&#34;&gt;fork1(9)&lt;/a&gt; creates a new process out of &lt;code&gt;p1&lt;/code&gt;, which should be the current thread. This function is used primarily to implement the &lt;a href=&#34;https://man.openbsd.org/fork.2&#34;&gt;fork(2)&lt;/a&gt; and &lt;a href=&#34;https://man.openbsd.org/vfork.2&#34;&gt;vfork(2)&lt;/a&gt; system calls, as well as the &lt;a href=&#34;https://man.openbsd.org/kthread_create.9&#34;&gt;kthread_create(9)&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;Life cycle of a process (in brief):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;“ls” → fork(2) → sys_fork() → fork1() → sys_execve() → sys_exit() → exit1()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Working of &lt;code&gt;fork1()&lt;/code&gt;
After “ls” from user-space it goes to fork() from libc then from there to sys_fork().&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sys_fork&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v, register_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;retval)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags;

    flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FORK_FORK;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ptmask &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PTRACE_FORK)
        flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; FORK_PTRACE;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fork1(p, flags, fork_return, NULL, retval, NULL);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;FORK_FORK: It is a macro which defines that the call is done by the fork(2). Used only for statistics.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;#define FORK_FORK 0x00000001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;So, the value of &amp;ldquo;flags&amp;rdquo; variable is set to 1 , because the call is done by fork(2)&lt;/li&gt;
&lt;li&gt;check for PTRACE and if enable then update the flags with FORK_PTRACE else leave it and return to the fork1()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;fork1() initial code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;fork1&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;curp, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func)(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arg,
    register_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;retval, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;rnewprocp)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; process &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;curpr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_p;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; process &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p;
    uid_t uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_ucred&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cr_ruid;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; vmspace &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;vm;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count;
    vaddr_t uaddr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; error;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  ptrace_state &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;newptstat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;

    KASSERT((flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(FORK_FORK &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_VFORK &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_PPWAIT &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_PTRACE
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_IDLE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_SHAREVM &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_SHAREFILES &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_NOZOMBIE
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_SYSTEM &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FORK_SIGHAND)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    KASSERT((flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_SIGHAND) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_SHAREVM));
    KASSERT(func &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork_check_maxthread(uid)))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; error;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((nprocesses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; maxprocess &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; uid &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
        nprocesses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; maxprocess) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; timeval lasttfm;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ratecheck(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lasttfm, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;fork_tfmrate))
            tablefull(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;process&amp;#34;&lt;/span&gt;);
        nthreads&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EAGAIN;
    }
    nprocesses&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
...
...
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;From the above code-snippet, &lt;code&gt;curp-&amp;gt;p_p-&amp;gt;ps_comm&lt;/code&gt; is &lt;code&gt;“ksh”&lt;/code&gt;, which is a parent process that will fork “ls”&lt;/li&gt;
&lt;li&gt;Initially some process structures, then, setting &lt;code&gt;uid = curp-&amp;gt;p_ucred-&amp;gt;cr_ruid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then, the structure for process address space information&lt;/li&gt;
&lt;li&gt;Then, some variables and ptrace_state structure and then the condition which is checking for flag values using KASSERT.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fork_check_maxthread(uid)&lt;/code&gt;: it is used to the check or track the number of threads invoked by the specific uid
&lt;ul&gt;
&lt;li&gt;It checks the number of threads invoked by specific uid shouldn’t be greater than the number of maximum threads allowed or for maxthread - 5 because the last 5 process from the maxthread is reserved for the root&lt;/li&gt;
&lt;li&gt;If it is greater than defined maxthread or maxthread — 5, it will print the messagetablefullonce every 10 seconds. Else, it will increment the number of threads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Defination of &lt;code&gt;fork_check_maxthread(uid)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;fork_check_maxthread&lt;/span&gt;(uid_t uid)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Although process entries are dynamically created, we still keep
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * a global limit on the maximum number we will create. We reserve
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the last 5 processes to root. The variable nprocesses is the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * current number of processes, maxprocess is the limit.  Similar
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * rules for threads (struct proc): we reserve the last 5 to root;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the variable nthreads is the current number of procs, maxthread is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the limit.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((nthreads &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; maxthread &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; uid &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nthreads &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; maxthread) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; timeval lasttfm;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ratecheck(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lasttfm, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;fork_tfmrate))
            tablefull(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proc&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EAGAIN;
    }
    nthreads&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, after &lt;code&gt;fork_check_thread()&lt;/code&gt;, similar code logic is implemented for tracking process as visible from the &lt;code&gt;fork1(9)&lt;/code&gt; defination&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fork1(9)&lt;/code&gt; defination continued&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;...
...
    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Increment the count of processes running with this uid.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Don&amp;#39;t allow a nonprivileged user to exceed their current limit.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chgproccnt(uid, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (uid &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lim_cur(RLIMIT_NPROC)) {
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)chgproccnt(uid, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        nprocesses&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        nthreads&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EAGAIN;
    }

    uaddr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uvm_uarea_alloc();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (uaddr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)chgproccnt(uid, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        nprocesses&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        nthreads&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (ENOMEM);
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * From now on, we&amp;#39;re committed to the fork and cannot fail.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; thread_new(curp, uaddr);
    pr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process_new(p, curpr, flags);

    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_fd     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_fd;
    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_vmspace    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_vmspace;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_SYSTEM)
        atomic_setbits_int(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_flag, P_SYSTEM);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_PPWAIT) {
        atomic_setbits_int(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags, PS_PPWAIT);
        atomic_setbits_int(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags, PS_ISPWAIT);
    }
...
...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;It is changing the count of threads for a specific user via &lt;code&gt;chgproccnt(uid,1)&lt;/code&gt; and the defination given below:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Change the count associated with number of threads
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * a given user is using.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;chgproccnt&lt;/span&gt;(uid_t uid, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; diff)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; uidinfo &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;uip;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; count;

    uip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uid_find(uid);
    count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (uip&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ui_proccnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; diff);
    uid_release(uip);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chgproccnt: procs &amp;lt; 0&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;struct uidinfo&lt;/code&gt; structure maintains every uid resource consumption counts including the process count and socket buffer space usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;uid_find(uid)&lt;/code&gt; function looks up and returns the &lt;code&gt;uidinfo&lt;/code&gt; structure for uid. If no uidinfo structure exists for &lt;code&gt;uid&lt;/code&gt;, a new structure will be allocated and initialized.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Then, it increments the number of processes, that is, &lt;code&gt;ui_proccnt&lt;/code&gt; by diff then returns count.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coming back to &lt;code&gt;fork1(9)&lt;/code&gt; code after &lt;code&gt;chgproccnt()&lt;/code&gt;, it checks for the non-privileged &amp;ldquo;uid&amp;rdquo; and also checks for the number of process is greater than the soft limit of resources which is &lt;code&gt;0x7fffffffffffffff&lt;/code&gt; based on the observation through debugging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If non-privileged is allowed and the count is increased by the maximum resource limit, it will decrease the count via chgproccnt() by passing -1 as diff parameter and also decrease the number of processes and threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, &lt;code&gt;uvm_uarea_alloc()&lt;/code&gt; function allocates a thread&amp;rsquo;s &lt;code&gt;uarea&lt;/code&gt;, the memory where its kernel stack and PCB are stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, it checks if the &amp;ldquo;uaddr&amp;rdquo; variable doesn’t contain any thread’s address, if it is zero, then it decrements the count of the number of process and thread.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there are some important functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_new(struct proc *parent, vaddr_t uaddr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_new(struct proc *p, struct process *parent, int flags)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* Allocate and initialize a thread (proc) structure, given the parent thread.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_new&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;parent, vaddr_t uaddr)
{
   &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p; 

   p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool_get(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;proc_pool, PR_WAITOK);
   p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SIDL;           &lt;span style=&#34;color:#75715e&#34;&gt;/* protect against others */&lt;/span&gt;
   p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
   p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_limit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;

   &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * Make a proc table entry for the new process.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * Start by zeroing the section of proc that is zero-initialized,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * then copy the section that is copied directly from the parent.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    */&lt;/span&gt;
   memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_startzero, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
       (caddr_t)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_endzero &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (caddr_t)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_startzero);
   memcpy(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_startcopy, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_startcopy,
       (caddr_t)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_endcopy &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (caddr_t)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_startcopy);
   crhold(p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_ucred);
   p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)uaddr;

   &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * Initialize the timeouts.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    */&lt;/span&gt;
   timeout_set(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_sleep_to, endtsleep, p);

   &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * set priority of child to be that of parent
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * XXX should move p_estcpu into the region of struct proc which gets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * copied.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    */&lt;/span&gt;
   scheduler_fork_hook(parent, p);

&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef WITNESS
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_sleeplocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#if NKCOV &amp;gt; 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_kd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;
}
       }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;in the &lt;code&gt;thread_new()&lt;/code&gt; function, we will get our user-space process, that is, in our case “ls”. The process gets retrieved from the pool of processess, that is, proc_pool via &lt;code&gt;pool_get()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;then, we set the state of the thread to be SIDL , which means that the process/thread is being created by fork, then set &lt;code&gt;p→p_flag = 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then, it zeroes the section of &amp;ldquo;proc&amp;rdquo;. the below code snippet from &amp;ldquo;sys/proc.h&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* The following fields are all zeroed upon creation in fork. */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define p_startzero p_dupfd
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p_dupfd;     &lt;span style=&#34;color:#75715e&#34;&gt;/* Sideways return value from filedescopen. XXX */&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;    p_thrslpid; &lt;span style=&#34;color:#75715e&#34;&gt;/* for thrsleep syscall */&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* scheduling */&lt;/span&gt;
    u_int   p_estcpu;       &lt;span style=&#34;color:#75715e&#34;&gt;/* [s] Time averaged val of p_cpticks */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p_cpticks;   &lt;span style=&#34;color:#75715e&#34;&gt;/* Ticks of cpu time. */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p_wchan;   &lt;span style=&#34;color:#75715e&#34;&gt;/* [s] Sleep address. */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  timeout p_sleep_to;&lt;span style=&#34;color:#75715e&#34;&gt;/* timeout for tsleep() */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p_wmesg;        &lt;span style=&#34;color:#75715e&#34;&gt;/* [s] Reason for sleep. */&lt;/span&gt;
    fixpt_t p_pctcpu;       &lt;span style=&#34;color:#75715e&#34;&gt;/* [s] %cpu for this thread */&lt;/span&gt;
    u_int   p_slptime;      &lt;span style=&#34;color:#75715e&#34;&gt;/* [s] Time since last blocked. */&lt;/span&gt;
    u_int   p_uticks;       &lt;span style=&#34;color:#75715e&#34;&gt;/* Statclock hits in user mode. */&lt;/span&gt;
    u_int   p_sticks;       &lt;span style=&#34;color:#75715e&#34;&gt;/* Statclock hits in system mode. */&lt;/span&gt;
    u_int   p_iticks;       &lt;span style=&#34;color:#75715e&#34;&gt;/* Statclock hits processing intr. */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  cpu_info &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; p_cpu; &lt;span style=&#34;color:#75715e&#34;&gt;/* [s] CPU we&amp;#39;re running on. */&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  rusage p_ru;        &lt;span style=&#34;color:#75715e&#34;&gt;/* Statistics */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  tusage p_tu;        &lt;span style=&#34;color:#75715e&#34;&gt;/* accumulated times. */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  timespec p_rtime;   &lt;span style=&#34;color:#75715e&#34;&gt;/* Real time. */&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;  p_siglist;     &lt;span style=&#34;color:#75715e&#34;&gt;/* Signals arrived but not delivered. */&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;/* End area that is zeroed on creation. */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;in above code snippet, all the variables will be zeroed via memset() upon creation in the fork.&lt;/li&gt;
&lt;li&gt;then, they are copying the section from &lt;code&gt;parent→p_startcopy&lt;/code&gt; to &lt;code&gt;p→p_startcopy&lt;/code&gt; using memcpy. Following are the field members that will be copied.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define p_startcopy p_sigmask
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sigset_t p_sigmask; &lt;span style=&#34;color:#75715e&#34;&gt;/* Current signal mask. */&lt;/span&gt;

    u_char  p_priority; &lt;span style=&#34;color:#75715e&#34;&gt;/* [s] Process priority. */&lt;/span&gt;
    u_char  p_usrpri;   &lt;span style=&#34;color:#75715e&#34;&gt;/* [s] User-prio based on p_estcpu &amp;amp; ps_nice. */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p_pledge_syscall;   &lt;span style=&#34;color:#75715e&#34;&gt;/* Cache of current syscall */&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  ucred &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p_ucred;     &lt;span style=&#34;color:#75715e&#34;&gt;/* cached credentials */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  sigaltstack p_sigstk;   &lt;span style=&#34;color:#75715e&#34;&gt;/* sp &amp;amp; on stack state variable */&lt;/span&gt;

    u_long  p_prof_addr;    &lt;span style=&#34;color:#75715e&#34;&gt;/* tmp storage for profiling addr until AST */&lt;/span&gt;
    u_long  p_prof_ticks;   &lt;span style=&#34;color:#75715e&#34;&gt;/* tmp storage for profiling ticks until AST */&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;/* End area that is copied on creation. */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define p_endcopy   p_addr
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;coming back to &lt;code&gt;thread_new()&lt;/code&gt;, &lt;code&gt;crhold(p-&amp;gt;p_ucred)&lt;/code&gt; functions will increment the reference count in &lt;code&gt;struct ucred&lt;/code&gt; structure, that is, &lt;code&gt;p-&amp;gt;p_ucred-&amp;gt;cr_ref++&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;then, typecast the thread’s addr, that is, &lt;code&gt;(struct user *)uaddr&lt;/code&gt; and save it in kernel’s virtual addr of u-area.&lt;/li&gt;
&lt;li&gt;Now, it will initialize the timeout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dummy function to show the &lt;code&gt;timeout_set&lt;/code&gt; function working. &lt;code&gt;timeout_set(timeout, b, argument);&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;timeout_set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; timeout &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fn)(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arg)
{
        new&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fn;
        new&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg;
        new&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TIMEOUT_INITIALIZED;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;this function will initialize the timeout struture and call the function b with argument.&lt;/li&gt;
&lt;li&gt;scheduler_fork_hook(parent, p): It is a macro which will update the &lt;code&gt;p_estcpu&lt;/code&gt; of child from parent’s p_estcpu.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p_estcpu&lt;/code&gt; holds an estimate of the amount of CPU that the process has used recently&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Inherit the parent’s scheduler history */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define scheduler_fork_hook(parent, child) do {    \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; (child)-&amp;gt;p_estcpu = (parent)-&amp;gt;p_estcpu;           \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;} while (0)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;then, return the newly created thread &lt;code&gt;p&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;another important function is &lt;code&gt;process_new()&lt;/code&gt; which creates the process in a similar fashion like &lt;code&gt;thread_new()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Defination of &lt;code&gt;process_new()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Allocate and initialize a new process.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; process &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;process_new&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; process &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;parent, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; process &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pr;

    pr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool_get(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;process_pool, PR_WAITOK);

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Make a process structure for the new process.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Start by zeroing the section of proc that is zero-initialized,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * then copy the section that is copied directly from the parent.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_startzero, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
        (caddr_t)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_endzero &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (caddr_t)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_startzero);
    memcpy(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_startcopy, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_startcopy,
        (caddr_t)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_endcopy &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (caddr_t)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_startcopy);

    process_initialize(pr, p);
    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; allocpid();
    lim_fork(parent, pr);

    &lt;span style=&#34;color:#75715e&#34;&gt;/* post-copy fixups */&lt;/span&gt;
    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parent;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* bump references to the text vnode (for sysctl) */&lt;/span&gt;
    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_textvp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_textvp;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_textvp)
        vref(pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_textvp);

    &lt;span style=&#34;color:#75715e&#34;&gt;/* copy unveil if unveil is active */&lt;/span&gt;
    unveil_copy(parent, pr);

    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        (PS_SUGID &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PS_SUGIDEXEC &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PS_PLEDGE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PS_EXECPLEDGE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PS_WXNEEDED);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_session&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s_ttyvp &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; parent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_CONTROLT;
...
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;the initials of the code of &lt;code&gt;process_new()&lt;/code&gt; is similar to &lt;code&gt;thread_new()&lt;/code&gt; like select process from process_pool via &lt;code&gt;pool_get()&lt;/code&gt; then zeroing using memset and copying using memcpy.&lt;/li&gt;
&lt;li&gt;Next, the initialization of process using &lt;code&gt;process_initialize()&lt;/code&gt;, defination as given below:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Initialize common bits of a process structure, given the initial thread.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;process_initialize&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; process &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pr, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;/* initialize the thread links */&lt;/span&gt;
    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_mainproc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
    TAILQ_INIT(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_threads);
    TAILQ_INSERT_TAIL(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_threads, p, p_thr_link);
    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_refcnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pr;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* give the process the same creds as the initial thread */&lt;/span&gt;
    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ucred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_ucred;
    crhold(pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ucred);
    KASSERT(p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_ucred&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cr_ref &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);   &lt;span style=&#34;color:#75715e&#34;&gt;/* new thread and new process */&lt;/span&gt;

    LIST_INIT(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_children);
    LIST_INIT(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ftlist);
    LIST_INIT(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_kqlist);
    LIST_INIT(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_sigiolst);

    mtx_init(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_mtx, IPL_MPFLOOR);

    timeout_set(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_realit_to, realitexpire, pr);
    timeout_set(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_rucheck_to, rucheck, pr);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process_initialize()&lt;/code&gt; internals:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps_mainproc&lt;/code&gt; : It is the original and main thread in the process. It’s only special for handling of &lt;code&gt;p_xstat&lt;/code&gt;, some signals and ptrace behaviours that need to be fixed.&lt;/li&gt;
&lt;li&gt;Copy initial thread, that is, p to &lt;code&gt;pr-&amp;gt;mainproc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Initialize the queue with referenced by head. Here, head is &lt;code&gt;pr→ps_threads&lt;/code&gt;. Then, Insert &amp;ldquo;elm&amp;rdquo; at the TAIL of the queue. Here, elm is p .&lt;/li&gt;
&lt;li&gt;set the number of references to 1, that is, &lt;code&gt;pr-&amp;gt;ps_refcnt = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy the process pr to the process of initial thread.&lt;/li&gt;
&lt;li&gt;set the same creds for process as the initial thread.&lt;/li&gt;
&lt;li&gt;condition check for the new thread and the new process via KASSERT.&lt;/li&gt;
&lt;li&gt;Initialize the List referenced by head. Here, head is &lt;code&gt;pr-&amp;gt;ps_children&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Again, initialize timeout. (for detail, see thead_new)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;after the process initialization, pid allocation takes place. &lt;code&gt;ps→ps_pid = allocpid();&lt;/code&gt; where &lt;code&gt;allocpid()&lt;/code&gt; returns unused pid&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocpid()&lt;/code&gt; internally calls the &lt;code&gt;arc4random_uniform()&lt;/code&gt; which further calls &lt;code&gt;arc4random()&lt;/code&gt; then through &lt;code&gt;arc4random()&lt;/code&gt; a completely randomized number is returned which is used as pid.&lt;/li&gt;
&lt;li&gt;then, for the availability of pid (or for unused pid) it verifies that whether the new pid is already taken or not by any process. It verifies this one by one in the process, process groups, and zombie process by using function &lt;code&gt;ispidtaken(pid_t pid)&lt;/code&gt; which internally calls following functions:
&lt;ul&gt;
&lt;li&gt;prfind(pid_t pid) : Locate a process by number&lt;/li&gt;
&lt;li&gt;pgfind(pid_t pgid) : Locate a process group by number&lt;/li&gt;
&lt;li&gt;zombiefind(pid_t pid :Locate a zombie process by number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Checks for current use of a pid, either as a pid or pgid.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
pid_t oldpids[&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ispidtaken&lt;/span&gt;(pid_t pid)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; i;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nitems(oldpids); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; oldpids[i])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (prfind(pid) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pgfind(pid) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (zombiefind(pid) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}

&lt;span style=&#34;color:#75715e&#34;&gt;/* Find an unused pid */&lt;/span&gt;
pid_t
&lt;span style=&#34;color:#a6e22e&#34;&gt;allocpid&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; pid_t lastpid;
    pid_t pid;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;randompid) {
        &lt;span style=&#34;color:#75715e&#34;&gt;/* only used early on for system processes */&lt;/span&gt;
        pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;lastpid;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;/* Find an unused pid satisfying lastpid &amp;lt; pid &amp;lt;= PID_MAX */&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
            pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arc4random_uniform(PID_MAX &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lastpid) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                lastpid;
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (ispidtaken(pid));
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pid;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;store the pointer to parent process in &lt;code&gt;pr→ps_pptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Increment the number of references count in process limit structure, that is, struct plimit&lt;/li&gt;
&lt;li&gt;Store the vnode of executable of parent into &lt;code&gt;pr→ps_textvp&lt;/code&gt; ,that is,&lt;code&gt;pr→ps_textvp = parent→ps_textvp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pr&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;→&lt;/span&gt;ps_textvp)
        vref(pr&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;→&lt;/span&gt;ps_textvp); &lt;span style=&#34;color:#75715e&#34;&gt;/* vref --&amp;gt; vnode reference */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above code snippet means, if valid vnode found then increment the v_usecount++ variable inside the struct vnode structure of the executable.
Now, the calculation for setting up process flags:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;pr&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;→&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parent &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;→&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (PS_SUGID &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PS_SUGIDEXEC &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PS_PLEDGE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PS_EXECPLEDGE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PS_WXNEEDED);
pr &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;→&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parent &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;→&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x200000&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (vnode of controlling terminal &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        pr&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;→&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; parent&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;→&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_CONTROLT;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;process_new()&lt;/code&gt; continued&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Duplicate sub-structures as needed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Increase reference counts on shared objects.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_SHAREFILES)
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fdshare(parent);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fdcopy(parent);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_SIGHAND)
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_sigacts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigactsshare(parent);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_sigacts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigactsinit(parent);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_SHAREVM)
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_vmspace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uvmspace_share(parent);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_vmspace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uvmspace_fork(parent);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_PROFIL)
        startprofclock(pr);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_PTRACE)
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; parent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_TRACED;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_NOZOMBIE)
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; PS_NOZOMBIE;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_SYSTEM)
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; PS_SYSTEM;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* mark as embryo to protect against others */&lt;/span&gt;
    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; PS_EMBRYO;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* Force visibility of all of the above changes */&lt;/span&gt;
    membar_producer();

    &lt;span style=&#34;color:#75715e&#34;&gt;/* it&amp;#39;s sufficiently inited to be globally visible */&lt;/span&gt;
    LIST_INSERT_HEAD(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;allprocess, pr, ps_list);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if-else conditions explained:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;- if child_able_to_share_file_descriptor_table_with_parent:
         pr-&amp;gt;ps_fd = fdshare(parent)      /* share the table */
  else
         pr-&amp;gt;ps_fd = fdcopy(parent)       /* copy the table */
- if child_able_to_share_the_parent&amp;#39;s_signal_actions:
         pr-&amp;gt;ps_sigacts = sigactsshare(parent) /* share */
  else
         pr-&amp;gt;ps_sigacts = sigactsinit(parent)  /* copy */
- if child_able_to_share_the_parent&amp;#39;s addr space:
         pr-&amp;gt;ps_vmspace = uvmspace_share(parent)
  else
         pr-&amp;gt;ps_vmspace = uvmspace_fork(parent)
- if process_able_to_start_profiling:
         smartprofclock(pr);    /* start profiling on a process */
- if check_child_able_to_start_ptracing:
         pr-&amp;gt;ps_flags |= parent-&amp;gt;ps_flags &amp;amp; PS_PTRACED
- if check_no_signal_or_zombie_at_exit:
         pr-&amp;gt;ps_flags |= PS_NOZOMBIE /*No signal or zombie at exit
- if check_signals_stat_swaping:
         pr-&amp;gt;ps_flags |= PS_SYSTEM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;update the &lt;code&gt;pr→ps_flags&lt;/code&gt; with &lt;code&gt;PS_EMBRYO&lt;/code&gt; by ORing it, that is, &lt;code&gt;pr→ps_flags |= PS_EMBRYO /* New process, not yet fledged */&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;membar_producer()&lt;/code&gt; → Force visibility of all of the above changes.
- All stores preceding the memory barrier will reach global visibility before any stores after the memory barrier reach global visibility.&lt;/p&gt;
&lt;p&gt;In short, as per my understanding and discussion with openbsd community, it means forcefully make visible changes globally.&lt;/p&gt;
&lt;p&gt;Insert the new element, that is, &lt;code&gt;pr&lt;/code&gt; at the head of the list. Here, head is &lt;code&gt;allprocess&lt;/code&gt;  and returns &lt;code&gt;pr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fork1()&lt;/code&gt; code continued&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;...
...
...
    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_fd     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_fd;
    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_vmspace    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_vmspace;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_SYSTEM)
        atomic_setbits_int(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_flag, P_SYSTEM);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_PPWAIT) {
        atomic_setbits_int(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags, PS_PPWAIT);
        atomic_setbits_int(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags, PS_ISPWAIT);
    }

&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef KTRACE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Copy traceflag and tracefile if enabled.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * If not inherited, these were zeroed above.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_traceflag &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; KTRFAC_INHERIT)
        ktrsettrace(pr, curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_traceflag, curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_tracevp,
            curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_tracecred);
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Finish creating the child thread.  cpu_fork() will copy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * and update the pcb and make the child ready to run.  If
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * this is a normal user fork, the child will exit directly
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * to user mode via child_return() on its first time slice
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * and will not return here.  If this is a kernel thread,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the specified entry point will be executed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    cpu_fork(curp, p, NULL, NULL, func, arg &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; arg : p);

    vm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_vmspace;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_FORK) {
        forkstat.cntfork&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        forkstat.sizfork &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; vm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;vm_dsize &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; vm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;vm_ssize;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_VFORK) {
        forkstat.cntvfork&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        forkstat.sizvfork &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; vm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;vm_dsize &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; vm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;vm_ssize;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        forkstat.cntkthread&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_TRACED &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_FORK)
        newptstat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;newptstat), M_SUBPROC, M_WAITOK);

    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_tid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; alloctid();

    LIST_INSERT_HEAD(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;allproc, p, p_list);
    LIST_INSERT_HEAD(TIDHASH(p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_tid), p, p_hash);
    LIST_INSERT_HEAD(PIDHASH(pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pid), pr, ps_hash);
    LIST_INSERT_AFTER(curpr, pr, ps_pglist);
    LIST_INSERT_HEAD(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_children, pr, ps_sibling);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Substructures &lt;code&gt;p→p_fd&lt;/code&gt; and &lt;code&gt;p→p_vmspace&lt;/code&gt; directly copied values of &lt;code&gt;pr→ps_fd&lt;/code&gt; and &lt;code&gt;pr→ps_vmspace&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* substructures: */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; filedesc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p_fd;      &lt;span style=&#34;color:#75715e&#34;&gt;/* copy of p_p-&amp;gt;ps_fd */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; vmspace &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p_vmspace;  &lt;span style=&#34;color:#75715e&#34;&gt;/* copy of p_p-&amp;gt;ps_vmspace */&lt;/span&gt;             
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;if (process_has_no_signals_stats_or_swapping) then atomically set bits using ```atomic_setbits_int(pr →ps_flags, PS_SYSTEM);```

if (child_is_suspending_the_parent_process_until_the_child_is terminated (by calling _exit(2) or abnormally), or makes a call to execve(2)) then atomically set bits,
```atomic_setbits_int(pr →ps_flags, PS_PPWAIT);```
```atomic_setbits_int(pr →ps_flags, PS_ISPWAIT);```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef KTRACE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Some KTRACE related things */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cpu_fork(curp, p, NULL, NULL, func, arg &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;arg: p)

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Finish creating the child thread. cpu_fork() will copy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * and update the pcb and make the child ready to run. The
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * child will exit directly to user mode via child_return()
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * on its first time slice and will not return here.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to create or update PCB and make child ready to RUN.&lt;/p&gt;
&lt;p&gt;Address space &lt;code&gt;vm = pr→ps_vmspace&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;if (call is done by fork syscall); then
    increment the number of fork() system calls.
    update the vm_pages affected by fork() syscall with addition of data page and stack page. 
else if (call is done by vfork() syscall); then
    do as same as if it was fork syscall but for vfork system call. (see above if {for fork})
else
    increment the number of kernel threads created.

If (process is being traced &amp;amp;&amp;amp; created by fork system call);then
{
    The malloc() function allocates the uninitialized memory in the kernel address space for an object whose size is specified by size, that is, here, sizeof(*newptstat). And, struct ptrace_state *newptstat
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;allocate thread ID, that is, &lt;code&gt;p→p_tid = alloctid();&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Find an unused tid */&lt;/span&gt;
pid_t
&lt;span style=&#34;color:#a6e22e&#34;&gt;alloctid&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    pid_t tid;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;/* (0 .. TID_MASK+1] */&lt;/span&gt;
        tid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (arc4random() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; TID_MASK);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (tfind(tid) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (tid);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;calling &lt;code&gt;arc4random()&lt;/code&gt; directly and using &lt;code&gt;tfind&lt;/code&gt; function for finding the thread ID by number&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inserts the new element &lt;code&gt;p&lt;/code&gt; at the head of the allprocess list&lt;/li&gt;
&lt;li&gt;insert the new element &lt;code&gt;p&lt;/code&gt; at the head of the thread hash list&lt;/li&gt;
&lt;li&gt;insert the new element &lt;code&gt;pr&lt;/code&gt; at the head of the process hash list&lt;/li&gt;
&lt;li&gt;insert the new element &lt;code&gt;pr&lt;/code&gt; after the curpr element&lt;/li&gt;
&lt;li&gt;insert the new element &lt;code&gt;pr&lt;/code&gt; at the head of the children process  list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;fork1()&lt;/code&gt; continued&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_TRACED) {
        pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_oppid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pid;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pptr &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pptr)
            proc_reparent(pr, curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pptr);

        &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;         * Set ptrace status.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;         */&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newptstat &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
            pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ptstat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newptstat;
            newptstat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
            curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ptstat&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pe_report_event &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PTRACE_FORK;
            pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ptstat&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pe_report_event &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PTRACE_FORK;
            curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ptstat&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pe_other_pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pid;
            pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_ptstat&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pe_other_pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pid;
        }
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * For new processes, set accounting bits and mark as complete.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    getnanotime(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_start);
    pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_acflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AFORK;
    atomic_clearbits_int(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags, PS_EMBRYO);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_IDLE) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        fork_thread_start(p, curp, flags);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_cpu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg;

    free(newptstat, M_SUBPROC, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;newptstat));

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Notify any interested parties about the new process.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    KNOTE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_klist, NOTE_FORK &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pid);

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Update stats now that we know the fork was successful.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    uvmexp.forks&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_PPWAIT)
        uvmexp.forks_ppwait&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_SHAREVM)
        uvmexp.forks_sharevm&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Pass a pointer to the new process to the caller.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rnewprocp &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rnewprocp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;If (isProcessPTRACED())
{
    then save the parent process id during ptracing, that is, 
    pr→ps_oppid = curpr→ps_pid
    If (pointer to parent process_of_child != pointer to parent process_of_current_process)
    {
        proc_reparent(pr, curpr→ps_pptr); /* Make current process the new parent of process child, that is, pr*/
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, check whether &lt;code&gt;newptstat&lt;/code&gt; contains some address, in our case, &lt;code&gt;newptstat&lt;/code&gt; contains a kernel virtual address returned by malloc(9)&lt;/p&gt;
&lt;p&gt;If above condition is true, that is, newptstat != NULL . Then, set the ptrace status:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;code&gt;newptstat&lt;/code&gt; point to the ptrace state structure then make the &lt;code&gt;newptstat&lt;/code&gt; point to NULL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the ptrace status to the &lt;code&gt;curpr&lt;/code&gt; process and also the &lt;code&gt;pr&lt;/code&gt; process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;curpr-&amp;gt;ps_ptstat-&amp;gt;pe_report_event = PTRACE_FORK;
pr-&amp;gt;ps_ptstat-&amp;gt;pe_report_event = PTRACE_FORK;
curpr-&amp;gt;ps_ptstat-&amp;gt;pe_other_pid = pr-&amp;gt;ps_pid;
pr-&amp;gt;ps_ptstat-&amp;gt;pe_other_pid = curpr-&amp;gt;ps_pid;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for the new process set accounting bits and mark it as complete.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get the nano time to start the process.&lt;/li&gt;
&lt;li&gt;Set accounting flags to AFORK which means forked but not execed.&lt;/li&gt;
&lt;li&gt;atomically clear the bits.&lt;/li&gt;
&lt;li&gt;Then, check for the new child is in the IDLE state or not, if yes then make it runnable and add it to the run queue by &lt;code&gt;fork_thread_start()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If it is not in the IDLE state then put arg to the current CPU, running on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Freeing the memory or kernel virtual address that is allocated by malloc for &lt;code&gt;newptstat&lt;/code&gt; through free&lt;/p&gt;
&lt;p&gt;Notify any interested parties about the new process via KNOTE&lt;/p&gt;
&lt;p&gt;Now, update the stats counter for successfully forked&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;        uvmexp.forks++; /* --&amp;gt;For forks */ 

        if (flags &amp;amp; FORK_PPWAIT)
                uvmexp.forks_ppwait++; /* --&amp;gt; counter for forks where parent waits */
        if (flags &amp;amp; FORK_SHAREVM)
                uvmexp.forks_sharevm++; /* --&amp;gt; counter for forks where vmspace is shared */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, pass pointer of the new process to the caller.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rnewprocp &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rnewprocp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Preserve synchronization semantics of vfork.  If waiting for
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * child to exec or exit, set PS_PPWAIT on child and PS_ISPWAIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * on ourselves, and sleep on our process for the latter flag
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * to go away.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * XXX Need to stop other rthreads in the parent
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_PPWAIT)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_ISPWAIT)
            tsleep(curpr, PWAIT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ppwait&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * If we&amp;#39;re tracing the child, alert the parent too.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FORK_PTRACE) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (curpr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; PS_TRACED))
        psignal(curp, SIGTRAP);

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Return child pid to parent process
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (retval &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
        retval[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ps_pid;
        retval[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;setting the &lt;code&gt;PPWAIT&lt;/code&gt; on child and the &lt;code&gt;PS_ISPWAIT&lt;/code&gt; on ourselves, that is, the parent and then go to the sleep on our process via tsleep&lt;/li&gt;
&lt;li&gt;Check, If the child is started with tracing enables &amp;amp;&amp;amp; the current process is being traced then alert the parent by using SIGTRAP signal&lt;/li&gt;
&lt;li&gt;Now, return the child pid to the parent process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;then we can see in the debugger that after the fork1, it jumps to &lt;code&gt;sys/arch/amd64/amd64/trap.c&lt;/code&gt; file for system call handling and for the setting frame.&lt;/p&gt;
&lt;p&gt;Some of the machine independent (MI) functions defined in &lt;code&gt;sys/sys/syscall_mi.h&lt;/code&gt; file, like, &lt;code&gt;mi_syscall()&lt;/code&gt;, &lt;code&gt;mi_syscall_return()&lt;/code&gt; and &lt;code&gt;mi_child_return()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;after handling the system calls from &amp;ldquo;trap.c&amp;rdquo;, control pass to the &lt;code&gt;sys_execve()&lt;/code&gt; system call&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openbsd/src/tree/master/sys&#34;&gt;OpenBSD Source Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atmnis.com/~proger/openkyiv/openkyiv2009_proger_sys.pdf&#34;&gt;OpenBSD kernel Internals — The Hitchhiker’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/&#34;&gt;OpenBSD manual pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.pr4tt.com/2016/02/02/BSD-virtual-memory/&#34;&gt;BSD Virtual Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://netbsd.gw.com/cgi-bin/man-cgi?++NetBSD-current&#34;&gt;NetBSD manual pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freebsd.org/cgi/man.cgi?&#34;&gt;FreeBSD manual pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/9780596005658.do&#34;&gt;Understanding The Linux Kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bookgenerate.com/dl.php?id=0672329468&#34;&gt;Linux Kernel Development - Robert Love&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally!! If something is missing or not correct, please feel free to update.
&lt;br&gt;
&lt;br&gt;
&lt;code&gt;Happy Kernel Hacking&lt;/code&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>OpenBSD - short intro on &#34;execpromises&#34; in the pledge(2)</title>
      <link>https://bsdb0y.github.io/posts/openbsd-intro-to-update-on-pledge/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bsdb0y.github.io/posts/openbsd-intro-to-update-on-pledge/</guid>
      <description>Hi there,
Today, we will be looking at the latest update for pledge(2) on OpenBSD and also about usage and howto.
In the previous post about pledge(2) system call, we understood the implementation of pledge(2) and also under the hood working of pledge(2), that is, the kernel level working of the pledge(2)
On 11 December 2017, **Theo de Raadt** said: List: openbsd-tech Subject: pledge execpromises From: Theo de Raadt Date: 2017-12-11 21:20:51 Message-ID: 6735.</description>
      <content>&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;Today, we will be looking at the latest update for pledge(2) on OpenBSD and also about usage and howto.&lt;/p&gt;
&lt;p&gt;In the previous &lt;a href=&#34;https://bsdb0y.github.io/posts/pledge-a-openbsd-defensive-approach&#34;&gt;post&lt;/a&gt; about pledge(2) system call, we understood the implementation of pledge(2) and also under the hood working of pledge(2), that is, the kernel level working of the pledge(2)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;On 11 December 2017, **Theo de Raadt** said:

        List: openbsd-tech
        Subject: pledge execpromises
        From: Theo de Raadt 
        Date: 2017-12-11 21:20:51
        Message-ID: 6735.1513027251 () cvs ! openbsd ! org

        This will probably be committed in the next day or so.

        The 2nd argument of pledge() becomes execpromises, which is what
        will gets activated after execve.

        There is also a small new feature called “error”, which causes
        violating system calls to return -1 with ENOSYS rather than killing
        the process. This must be used with EXTREME CAUTION because libraries
        and programs are full of unchecked system calls. If you carry on past
        one of these failures, your program is in uncharted territory and
        risks of exploitation become high.

        “error” is being introduced for a different reason: The pre-exec
        process’s expectation of what the post-exec process will do might
        mismatch, so “error” allows things like starting an editor which has
        no network access or maybe other restrictions in the future...

    cvsweb.openbsd.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OpenBSD 6.2-stable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;old pledge(2):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pledge&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;promises, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;paths[]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;updated pledge(2):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pledge&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;promises, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;execpromises);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the updated pledge(2), the second parameter is for &lt;code&gt;execpromises&lt;/code&gt; which are used to provide promises on child process which is invoked using the combination of execve(2)&lt;/p&gt;
&lt;p&gt;execve() system call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execve&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; argv[], &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; envp[]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Description of exec-family syscalls:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Like all of the exec functions, execve replaces the calling process image with a new process image. This has the effect of running a new program with the process ID of the calling process. Note that a new process is not started; the new process image simply overlays the original process image. The execve function is most commonly used to overlay a process image that has been created by a call to the fork function.

Return value:

A successful call to execve does not have a return value because the new process image overlays the calling process image. However, a -1 is returned if the call to execve is unsuccessful.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;consider following example implementation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// cat test_parent1.c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pledge(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio exec&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio rpath&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    {
        err(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent pledge&amp;#34;&lt;/span&gt;);
    }

    printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent: Hello, World!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arg[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./child&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
    execve(arg[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;arg[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], NULL);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// cat test_child1.c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
{
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child process&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# gcc -o parent test_parent1.c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gcc -o child test_child1.c&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# ./parent &amp;amp;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80962&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Parent: Hello, World!&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# dmesg|grep 80962&lt;/span&gt;
process_name:  child    pid:  &lt;span style=&#34;color:#ae81ff&#34;&gt;80962&lt;/span&gt;    ps_pledge:  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
process_name:  child    pid:  &lt;span style=&#34;color:#ae81ff&#34;&gt;80962&lt;/span&gt;    ps_pledge:  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As from above code, we have seen that pledge value of the new execve image is 9, that is;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#cat sys/pledge.h&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_RPATH 0x0000000000000001ULL /* allow open for read */&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_STDIO 0x0000000000000008ULL /* operate on own pid */&lt;/span&gt;

pledge &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; new execve image:

&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RPATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;STDIO&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEW PLEDGE&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
0x0000000000000001 | 0x0000000000000008 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x0000000000000009
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, I think it is better to use fork(2) with the combination of execve(2), so that, execve(2) will overlay forked process’s image, not parent’s image&lt;/p&gt;
&lt;p&gt;This update on the pledge(2) system call is the one step further towards improving OS security in OpenBSD&lt;/p&gt;
&lt;p&gt;If something is missing or not correct, please feel free to update.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>pledge(2): OpenBSD&#39;s defensive approach to OS Security</title>
      <link>https://bsdb0y.github.io/posts/pledge-a-openbsd-defensive-approach/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bsdb0y.github.io/posts/pledge-a-openbsd-defensive-approach/</guid>
      <description>Hello there,
I would like to introduce you all to the pledge(2) which is used to restrict the system operations and supported only on OpenBSD
I am learning about OpenBSD kernel internals and development and would like to share some tips on how to learn about OpenBSD kernel internals and developmen.
Let me first share with you all about our friends, they will be helping us in learning about BSD kernel internals:</description>
      <content>&lt;p&gt;Hello there,&lt;/p&gt;
&lt;p&gt;I would like to introduce you all to the pledge(2) which is used to restrict the system operations and supported only on OpenBSD&lt;/p&gt;
&lt;p&gt;I am learning about OpenBSD kernel internals and development and would like to share some tips on how to learn about OpenBSD kernel internals and developmen.&lt;/p&gt;
&lt;p&gt;Let me first share with you all about our friends, they will be helping us in learning about BSD kernel internals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the book &amp;ldquo;The design and implementation of the BSD operating system&amp;rdquo; by Kirk McKusick&lt;/li&gt;
&lt;li&gt;OpenBSD source code&lt;/li&gt;
&lt;li&gt;man pages and few presentations-papers on OpenBSD&lt;/li&gt;
&lt;li&gt;ask in mailing lists and OpenBSD Facebook group.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;what-is-pledge2&#34;&gt;What is pledge(2)?&lt;/h5&gt;
&lt;p&gt;&amp;ldquo;pledge&amp;rdquo; refers to &amp;ldquo;a solemn promise or undertaking&amp;rdquo;&lt;/p&gt;
&lt;p&gt;So, as in OpenBSD context:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calling pledge(2) in a program means the program is promissing to the kernel that it will only use the resources which it informs about prior using them&lt;br&gt;
&lt;br&gt;
For example:
&lt;code&gt;if a user-space program promises kernel to use only IO family calls then it can not perform/call any other family calls like network, process, etc. if it will try to call the other calls without prior informing to kernel then the kernel will abort() the process.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How does it make a program more secure?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By limiting the operations of a program. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we write a program named &amp;ldquo;abc&amp;rdquo; that only needed the stdio to just print something to stdout&lt;/li&gt;
&lt;li&gt;then we have to add pledge to use only stdio.&lt;/li&gt;
&lt;li&gt;then, a malicious user found out that there is a vulnerability in our program which one can exploit to get into shell.&lt;/li&gt;
&lt;li&gt;exploiting our program to open a shell will result in the kernel killing the process with SIGABRT, which can not be catch/ignore and generate a log in the &lt;code&gt;dmesg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this happens because opening a shell out of current program needs others family operations like we need fork(2) which resides in &amp;ldquo;proc&amp;rdquo; and execution is in &amp;ldquo;exec&amp;rdquo; then for network activities &amp;ldquo;net&amp;rdquo; but these are not promissed to kernel so calling apis from such family will be forbidden and leads to abort()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but after discussing with the developers, they mentioned that &lt;code&gt;pledge(2)&lt;/code&gt; is not a &lt;code&gt;system call filter&lt;/code&gt;. So, it is not used to restrict system calls.&lt;/p&gt;
&lt;p&gt;pledge(2) works on subset promise families like stdio, dns, inet, proc, net etc. but not directly on system calls like read, write, fork, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pledge(&amp;quot;read&amp;quot;, NULL)&lt;/code&gt;: incorrect way of using pledge(2)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pledge(&amp;quot;stdio inet&amp;quot;, NULL)&lt;/code&gt;: correct way of using pledge(2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and, based on the discussion with the developers they mentioned that &lt;code&gt;pledge(2) works on behavioral approach not just like 1:1 approach with the system calls&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On 11 December 2017, Theo de Raadt said:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;List: openbsd-tech
Subject: pledge execpromises
From: Theo de Raadt 
Date: 2017-12-11 21:20:51
Message-ID: 6735.1513027251 () cvs ! openbsd ! org

This will probably be committed in the next day or so.

The 2nd argument of pledge() becomes execpromises, which is what
will gets activated after execve.

There is also a small new feature called &amp;#34;error&amp;#34;, which causes
violating system calls to return -1 with ENOSYS rather than killing
the process. This must be used with EXTREME CAUTION because libraries
and programs are full of unchecked system calls. If you carry on past
one of these failures, your program is in uncharted territory and
risks of exploitation become high.

&amp;#34;error&amp;#34; is being introduced for a different reason: The pre-exec
process&amp;#39;s expectation of what the post-exec process will do might
mismatch, so &amp;#34;error&amp;#34; allows things like starting an editor which has
no network access or maybe other restrictions in the future...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;previously it was:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pledge&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;promises, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;paths[]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and now it is,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pledge&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;promises, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;execpromises);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;as per OpenBSD 6.2 stable and at the time of writing the blog, developers are still using &lt;code&gt;pledge(const char *promises, const char *paths[])&lt;/code&gt; so we will be focussing on the same&lt;/p&gt;
&lt;h5 id=&#34;how-to-use-pledge-in-a-program&#34;&gt;How to use pledge() in a program?&lt;/h5&gt;
&lt;p&gt;Let&amp;rsquo;s take a simple hello world example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pledge(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio&amp;#34;&lt;/span&gt;,NULL) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        err(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pledge&amp;#34;&lt;/span&gt;);
    }
printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pledged&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In the above example, the program takes pledge that it will only use stdio operations.&lt;/p&gt;
&lt;p&gt;Now, if the above program tries to open network socket(2) or any other operation like fork(2), then the kernel will kill this program with SIGABRT signal.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take another example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pledge(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,NULL) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        err(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pledge&amp;#34;&lt;/span&gt;);
    }
printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pledged&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, in this case, there is nothing in the first parameter of pledge(2), so, according to OpenBSD pledge man page,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;A promises value of &amp;#34;&amp;#34; restricts the process to the _exit(2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat sampe.c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
int
main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pledge&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio&amp;#34;&lt;/span&gt;,NULL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; -1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        err&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pledge&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    printf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pledged\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ./testing&lt;/span&gt;
Pledged
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# vim sampe.c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gcc -o testing_reduced sampe.c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# cat sampe.c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
int
main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pledge&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,NULL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; -1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        err&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pledge&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    printf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pledged\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ./testing_reduced&lt;/span&gt;
Abort trap &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;core dumped&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;little-introduction-about-the-working-of-pledge2-from-the-kernel-perspective&#34;&gt;Little introduction about the working of pledge(2) from the kernel perspective&lt;/h5&gt;
&lt;p&gt;This part was a little difficult to understand at first.
I am very thankful to OpenBSD developers: &lt;strong&gt;&lt;em&gt;Marc Espie&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Benny Löfgren&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Bob Beck&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Stuart Henderson&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Otto Moerbeek&lt;/em&gt;&lt;/strong&gt; for giving their precious time and resolving queries related to kernel level working of pledge(2).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pledge(&amp;quot;stdio&amp;quot;, NULL);&lt;/code&gt; or &lt;code&gt;pledge(&amp;quot;stdio inet proc route dns&amp;quot;, NULL)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this full string in pledge(2) is splitted into separate words like &amp;ldquo;stdio&amp;rdquo; or &amp;ldquo;&amp;lsquo;stdio&amp;rsquo;, &amp;lsquo;inet&amp;rsquo;, &amp;lsquo;proc&amp;rsquo;, &amp;lsquo;route&amp;rsquo;, &amp;lsquo;dns&amp;rsquo;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;then, these splitted words perform lookup operation from &lt;code&gt;pledgereq[]&lt;/code&gt; array and if found then their specific flags will return.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following &lt;code&gt;pledgereq[]&lt;/code&gt; array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;name;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; flags;
} pledgereq[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;audio&amp;#34;&lt;/span&gt;,		PLEDGE_AUDIO },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bpf&amp;#34;&lt;/span&gt;,		PLEDGE_BPF },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chown&amp;#34;&lt;/span&gt;,		PLEDGE_CHOWN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PLEDGE_CHOWNUID },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cpath&amp;#34;&lt;/span&gt;,		PLEDGE_CPATH },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disklabel&amp;#34;&lt;/span&gt;,		PLEDGE_DISKLABEL },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dns&amp;#34;&lt;/span&gt;,		PLEDGE_DNS },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dpath&amp;#34;&lt;/span&gt;,		PLEDGE_DPATH },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drm&amp;#34;&lt;/span&gt;,		PLEDGE_DRM },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;,		PLEDGE_ERROR },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exec&amp;#34;&lt;/span&gt;,		PLEDGE_EXEC },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fattr&amp;#34;&lt;/span&gt;,		PLEDGE_FATTR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PLEDGE_CHOWN },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flock&amp;#34;&lt;/span&gt;,		PLEDGE_FLOCK },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getpw&amp;#34;&lt;/span&gt;,		PLEDGE_GETPW },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,			PLEDGE_ID },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inet&amp;#34;&lt;/span&gt;,		PLEDGE_INET },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mcast&amp;#34;&lt;/span&gt;,		PLEDGE_MCAST },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pf&amp;#34;&lt;/span&gt;,			PLEDGE_PF },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proc&amp;#34;&lt;/span&gt;,		PLEDGE_PROC },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prot_exec&amp;#34;&lt;/span&gt;,		PLEDGE_PROTEXEC },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ps&amp;#34;&lt;/span&gt;,			PLEDGE_PS },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recvfd&amp;#34;&lt;/span&gt;,		PLEDGE_RECVFD },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;,		PLEDGE_ROUTE },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rpath&amp;#34;&lt;/span&gt;,		PLEDGE_RPATH },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sendfd&amp;#34;&lt;/span&gt;,		PLEDGE_SENDFD },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;settime&amp;#34;&lt;/span&gt;,		PLEDGE_SETTIME },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio&amp;#34;&lt;/span&gt;,		PLEDGE_STDIO },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tape&amp;#34;&lt;/span&gt;,		PLEDGE_TAPE },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tmppath&amp;#34;&lt;/span&gt;,		PLEDGE_TMPPATH },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tty&amp;#34;&lt;/span&gt;,		PLEDGE_TTY },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;,		PLEDGE_UNIX },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unveil&amp;#34;&lt;/span&gt;,		PLEDGE_UNVEIL },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vminfo&amp;#34;&lt;/span&gt;,		PLEDGE_VMINFO },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vmm&amp;#34;&lt;/span&gt;,		PLEDGE_VMM },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wpath&amp;#34;&lt;/span&gt;,		PLEDGE_WPATH },
	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wroute&amp;#34;&lt;/span&gt;,		PLEDGE_WROUTE },
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pledgereq&lt;/code&gt; array contains macro for every promises; for example, &lt;code&gt;stdio&lt;/code&gt; relates to &lt;code&gt;PLEDGE_STDIO&lt;/code&gt;. Now, these macros expand into their specific hex pledge values, like &lt;code&gt;PLEDGE_STDIO&lt;/code&gt; expands to &lt;code&gt;0x0000000000000008ULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For other macros and their expansions as mentioned below:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/cdefs.h;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * pledge(2) requests
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_ALWAYS	0xffffffffffffffffULL
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_RPATH	0x0000000000000001ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* allow open for read */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_WPATH	0x0000000000000002ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* allow open for write */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_CPATH	0x0000000000000004ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* allow creat, mkdir, unlink etc */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_STDIO	0x0000000000000008ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* operate on own pid */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_TMPPATH	0x0000000000000010ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* for mk*temp() */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_DNS	0x0000000000000020ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* DNS services */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_INET	0x0000000000000040ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* AF_INET/AF_INET6 sockets */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_FLOCK	0x0000000000000080ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* file locking */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_UNIX	0x0000000000000100ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* AF_UNIX sockets */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_ID	0x0000000000000200ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* allow setuid, setgid, etc */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_TAPE	0x0000000000000400ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Tape ioctl */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_GETPW	0x0000000000000800ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* YP enables if ypbind.lock */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_PROC	0x0000000000001000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* fork, waitpid, etc */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_SETTIME	0x0000000000002000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* able to set/adj time/freq */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_FATTR	0x0000000000004000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* allow explicit file st_* mods */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_PROTEXEC	0x0000000000008000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* allow use of PROT_EXEC */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_TTY	0x0000000000010000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* tty setting */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_SENDFD	0x0000000000020000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* AF_UNIX CMSG fd sending */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_RECVFD	0x0000000000040000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* AF_UNIX CMSG fd receiving */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_EXEC	0x0000000000080000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* execve, child is free of pledge */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_ROUTE	0x0000000000100000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* routing lookups */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_MCAST	0x0000000000200000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* multicast joins */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_VMINFO	0x0000000000400000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* vminfo listings */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_PS	0x0000000000800000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* ps listings */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_DISKLABEL 0x0000000002000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* disklabels */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_PF	0x0000000004000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* pf ioctls */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_AUDIO	0x0000000008000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* audio ioctls */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_DPATH	0x0000000010000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* mknod &amp;amp; mkfifo */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_DRM	0x0000000020000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* drm ioctls */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_VMM	0x0000000040000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* vmm ioctls */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_CHOWN	0x0000000080000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* chown(2) family */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_CHOWNUID	0x0000000100000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* allow owner/group changes */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_BPF	0x0000000200000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* bpf ioctl */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_ERROR	0x0000000400000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* ENOSYS instead of kill */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_WROUTE	0x0000000800000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* interface address ioctls */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_UNVEIL	0x0000001000000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* allow unveil() */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Bits outside PLEDGE_USERSET are used by the kernel itself
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * to track program behaviours which have been observed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_USERSET	0x0fffffffffffffffULL
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_STATLIE	0x4000000000000000ULL
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PLEDGE_YPACTIVE	0x8000000000000000ULL	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* YP use detected and allowed */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;now, all &lt;code&gt;PLEDGE_*&lt;/code&gt; macros will perform &lt;code&gt;or&lt;/code&gt;(&amp;quot;&lt;code&gt;|&lt;/code&gt;&amp;quot;) operation with each other and as per the promises in the pledge(2) from (user-space)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pseudo algorithm for better understanding given below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; content_of_PLEDGE_macro from [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dns&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;]

        flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; content_of_PLEDGE_macro

ps_pledge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Calculation of pledge_bit (pledge value) in kernel mode, (only for demonstration and understanding the concept better):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;test&lt;span style=&#34;color:#a6e22e&#34;&gt;@openbsd&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; cat pledge_python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

PLEDGE_ALWAYS    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#/* pledge always */&lt;/span&gt;
PLEDGE_RPATH     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000001&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#/* allow open for read */&lt;/span&gt;
PLEDGE_WPATH     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000002&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#/* allow open for write */&lt;/span&gt;
PLEDGE_CPATH     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000004&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#/* allow creat, mkdir, unlink etc */&lt;/span&gt;
PLEDGE_STDIO     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000008&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#/* operate on own pid */&lt;/span&gt;
PLEDGE_TMPPATH   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000010&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#/* for mk*temp() */&lt;/span&gt;
PLEDGE_DNS       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000020&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* DNS services */&lt;/span&gt;
PLEDGE_INET      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000040&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* AF_INET/AF_INET6 sockets */&lt;/span&gt;
PLEDGE_FLOCK     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000080&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* file locking */&lt;/span&gt;
PLEDGE_UNIX      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000100&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* AF_UNIX sockets */&lt;/span&gt;
PLEDGE_ID        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000200&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* allow setuid, setgid, etc */&lt;/span&gt;
PLEDGE_TAPE      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000400&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* Tape ioctl */&lt;/span&gt;
PLEDGE_GETPW     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000800&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* YP enables if ypbind.lock */&lt;/span&gt;
PLEDGE_PROC      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000001000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* fork, waitpid, etc */&lt;/span&gt;
PLEDGE_SETTIME   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000002000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* able to set/adj time/freq */&lt;/span&gt;
PLEDGE_FATTR     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000004000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* allow explicit file st_* mods */&lt;/span&gt;
PLEDGE_PROTEXEC  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000008000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* allow use of PROT_EXEC */&lt;/span&gt;
PLEDGE_TTY       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000010000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* tty setting */&lt;/span&gt;
PLEDGE_SENDFD    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000020000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* AF_UNIX CMSG fd sending */&lt;/span&gt;
PLEDGE_RECVFD    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000040000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* AF_UNIX CMSG fd receiving */&lt;/span&gt;
PLEDGE_EXEC      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000080000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* execve, child is free of pledge */&lt;/span&gt;
PLEDGE_ROUTE     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000100000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* routing lookups */&lt;/span&gt;
PLEDGE_MCAST     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000200000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* multicast joins */&lt;/span&gt;
PLEDGE_VMINFO    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* vminfo listings */&lt;/span&gt;
PLEDGE_PS        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000800000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* ps listings */&lt;/span&gt;
PLEDGE_DISKLABEL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000002000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#/* disklabels */&lt;/span&gt;
PLEDGE_PF        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000004000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* pf ioctls */&lt;/span&gt;
PLEDGE_AUDIO     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000008000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* audio ioctls */&lt;/span&gt;
PLEDGE_DPATH     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000010000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* mknod &amp;amp; mkfifo */&lt;/span&gt;
PLEDGE_DRM       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000020000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* drm ioctls */&lt;/span&gt;
PLEDGE_VMM       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000040000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* vmm ioctls */&lt;/span&gt;
PLEDGE_CHOWN     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000080000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* chown(2) family */&lt;/span&gt;
PLEDGE_CHOWNUID  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000100000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* allow owner/group changes */&lt;/span&gt;
PLEDGE_BPF       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000200000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* bpf ioctl */&lt;/span&gt;
PLEDGE_ERROR     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000400000000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# /* ENOSYS instead of kill */&lt;/span&gt;

pledgereq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;audio&amp;#34;&lt;/span&gt;     :  PLEDGE_AUDIO,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bpf&amp;#34;&lt;/span&gt;       :  PLEDGE_BPF,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chown&amp;#34;&lt;/span&gt;     :  PLEDGE_CHOWN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PLEDGE_CHOWNUID,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cpath&amp;#34;&lt;/span&gt;     :  PLEDGE_CPATH,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disklabel&amp;#34;&lt;/span&gt; :  PLEDGE_DISKLABEL,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dns&amp;#34;&lt;/span&gt;       :  PLEDGE_DNS,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dpath&amp;#34;&lt;/span&gt;     :  PLEDGE_DPATH,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drm&amp;#34;&lt;/span&gt;       :  PLEDGE_DRM,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exec&amp;#34;&lt;/span&gt;      :  PLEDGE_EXEC,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fattr&amp;#34;&lt;/span&gt;     :  PLEDGE_FATTR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PLEDGE_CHOWN,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flock&amp;#34;&lt;/span&gt;     :  PLEDGE_FLOCK,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getpw&amp;#34;&lt;/span&gt;     :  PLEDGE_GETPW,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;        :  PLEDGE_ID,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inet&amp;#34;&lt;/span&gt;      :  PLEDGE_INET,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mcast&amp;#34;&lt;/span&gt;     :  PLEDGE_MCAST,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pf&amp;#34;&lt;/span&gt;        :  PLEDGE_PF,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proc&amp;#34;&lt;/span&gt;      :  PLEDGE_PROC,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prot_exec&amp;#34;&lt;/span&gt; :  PLEDGE_PROTEXEC,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ps&amp;#34;&lt;/span&gt;        :  PLEDGE_PS,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recvfd&amp;#34;&lt;/span&gt;    :  PLEDGE_RECVFD,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;     :  PLEDGE_ROUTE,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rpath&amp;#34;&lt;/span&gt;     :  PLEDGE_RPATH,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sendfd&amp;#34;&lt;/span&gt;    :  PLEDGE_SENDFD,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;settime&amp;#34;&lt;/span&gt;   :  PLEDGE_SETTIME,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio&amp;#34;&lt;/span&gt;     :  PLEDGE_STDIO,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tape&amp;#34;&lt;/span&gt;      :  PLEDGE_TAPE,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tmppath&amp;#34;&lt;/span&gt;   :  PLEDGE_TMPPATH,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tty&amp;#34;&lt;/span&gt;       :  PLEDGE_TTY,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;      :  PLEDGE_UNIX,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vminfo&amp;#34;&lt;/span&gt;    :  PLEDGE_VMINFO,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vmm&amp;#34;&lt;/span&gt;       :  PLEDGE_VMM,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wpath&amp;#34;&lt;/span&gt;     :  PLEDGE_WPATH,
            }

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys_pledge&lt;/span&gt;(promises,path):
    flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(promises) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABRT (SIGABRT)&amp;#34;&lt;/span&gt;
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    promises_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; promises&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; perm &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; promises_list:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            perms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pledgereq[perm]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
            print(str(e) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: Undefined promise(s) made&amp;#34;&lt;/span&gt;)
            sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flags &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; pledgereq[perm]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flags

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:

    pledge_bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys_pledge(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NULL&amp;#34;&lt;/span&gt;);

    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pledge_bits :&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(hex(pledge_bits))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;test@openbsd:~$ python pledge_python.py &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio&amp;#34;&lt;/span&gt;
pledge_bits :0x8
test@openbsd:~$
test@openbsd:~$ python pledge_python.py &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio inet proc route dns&amp;#34;&lt;/span&gt;
pledge_bits :0x101068
test@openbsd:~$
test@openbsd:~$ python pledge_python.py &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio abcd&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcd&amp;#39;&lt;/span&gt;: Undefined promise&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; made
test@openbsd:~$
test@openbsd:~$ python pledge_python.py &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
ABRT &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SIGABRT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;there are lots of features and more detailed internals pending to cover which we will be discussing some other time in future&lt;/p&gt;
&lt;p&gt;but I will suggest and encourage everyone to read the user and kernel code of the pledge(2) to get more understanding about the internals - &lt;a href=&#34;https://github.com/openbsd/src/blob/master/sys/kern/kern_pledge.c&#34;&gt;sys/kern/kern_pledge.c&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the interesting part about pledge(2) is that the pledge(2) does check that you never go in increasing the pledge flags once a process gets pledged. So, it works mainly in decreasing order.&lt;/p&gt;
&lt;p&gt;Finally!! If something is missing or not correct, please feel free to update.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
